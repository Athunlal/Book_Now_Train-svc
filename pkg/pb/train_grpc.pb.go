// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainManagementClient is the client API for TrainManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainManagementClient interface {
	AddTrain(ctx context.Context, in *AddTrainRequest, opts ...grpc.CallOption) (*AddTrainResponse, error)
	AddStation(ctx context.Context, in *AddStationRequest, opts ...grpc.CallOption) (*AddStationResponse, error)
	AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*AddRouteResponse, error)
	UpdateTrainRoute(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	SearchTrain(ctx context.Context, in *SearchTrainRequest, opts ...grpc.CallOption) (*SearchTrainResponse, error)
	ViewTrain(ctx context.Context, in *ViewTrainRequest, opts ...grpc.CallOption) (*ViewTrainResponse, error)
	AddSeat(ctx context.Context, in *AddSeatRequest, opts ...grpc.CallOption) (*AddSeatResponse, error)
	UpdateSeatIntoTrain(ctx context.Context, in *UpdateSeatIntoTrainRequest, opts ...grpc.CallOption) (*UpdateSeatIntoTrainResponse, error)
	ViewStation(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewStationResponse, error)
	SearchTrainByName(ctx context.Context, in *SearchTrainByNameRequest, opts ...grpc.CallOption) (*SearchTrainByNameResponse, error)
	ViewRoute(ctx context.Context, in *ViewRoutesRequest, opts ...grpc.CallOption) (*ViewRoutesResponse, error)
}

type trainManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainManagementClient(cc grpc.ClientConnInterface) TrainManagementClient {
	return &trainManagementClient{cc}
}

func (c *trainManagementClient) AddTrain(ctx context.Context, in *AddTrainRequest, opts ...grpc.CallOption) (*AddTrainResponse, error) {
	out := new(AddTrainResponse)
	err := c.cc.Invoke(ctx, "/Train.TrainManagement/AddTrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainManagementClient) AddStation(ctx context.Context, in *AddStationRequest, opts ...grpc.CallOption) (*AddStationResponse, error) {
	out := new(AddStationResponse)
	err := c.cc.Invoke(ctx, "/Train.TrainManagement/AddStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainManagementClient) AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*AddRouteResponse, error) {
	out := new(AddRouteResponse)
	err := c.cc.Invoke(ctx, "/Train.TrainManagement/AddRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainManagementClient) UpdateTrainRoute(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/Train.TrainManagement/UpdateTrainRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainManagementClient) SearchTrain(ctx context.Context, in *SearchTrainRequest, opts ...grpc.CallOption) (*SearchTrainResponse, error) {
	out := new(SearchTrainResponse)
	err := c.cc.Invoke(ctx, "/Train.TrainManagement/SearchTrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainManagementClient) ViewTrain(ctx context.Context, in *ViewTrainRequest, opts ...grpc.CallOption) (*ViewTrainResponse, error) {
	out := new(ViewTrainResponse)
	err := c.cc.Invoke(ctx, "/Train.TrainManagement/ViewTrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainManagementClient) AddSeat(ctx context.Context, in *AddSeatRequest, opts ...grpc.CallOption) (*AddSeatResponse, error) {
	out := new(AddSeatResponse)
	err := c.cc.Invoke(ctx, "/Train.TrainManagement/AddSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainManagementClient) UpdateSeatIntoTrain(ctx context.Context, in *UpdateSeatIntoTrainRequest, opts ...grpc.CallOption) (*UpdateSeatIntoTrainResponse, error) {
	out := new(UpdateSeatIntoTrainResponse)
	err := c.cc.Invoke(ctx, "/Train.TrainManagement/UpdateSeatIntoTrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainManagementClient) ViewStation(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewStationResponse, error) {
	out := new(ViewStationResponse)
	err := c.cc.Invoke(ctx, "/Train.TrainManagement/ViewStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainManagementClient) SearchTrainByName(ctx context.Context, in *SearchTrainByNameRequest, opts ...grpc.CallOption) (*SearchTrainByNameResponse, error) {
	out := new(SearchTrainByNameResponse)
	err := c.cc.Invoke(ctx, "/Train.TrainManagement/SearchTrainByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainManagementClient) ViewRoute(ctx context.Context, in *ViewRoutesRequest, opts ...grpc.CallOption) (*ViewRoutesResponse, error) {
	out := new(ViewRoutesResponse)
	err := c.cc.Invoke(ctx, "/Train.TrainManagement/ViewRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainManagementServer is the server API for TrainManagement service.
// All implementations must embed UnimplementedTrainManagementServer
// for forward compatibility
type TrainManagementServer interface {
	AddTrain(context.Context, *AddTrainRequest) (*AddTrainResponse, error)
	AddStation(context.Context, *AddStationRequest) (*AddStationResponse, error)
	AddRoute(context.Context, *AddRouteRequest) (*AddRouteResponse, error)
	UpdateTrainRoute(context.Context, *UpdateRequest) (*UpdateResponse, error)
	SearchTrain(context.Context, *SearchTrainRequest) (*SearchTrainResponse, error)
	ViewTrain(context.Context, *ViewTrainRequest) (*ViewTrainResponse, error)
	AddSeat(context.Context, *AddSeatRequest) (*AddSeatResponse, error)
	UpdateSeatIntoTrain(context.Context, *UpdateSeatIntoTrainRequest) (*UpdateSeatIntoTrainResponse, error)
	ViewStation(context.Context, *ViewRequest) (*ViewStationResponse, error)
	SearchTrainByName(context.Context, *SearchTrainByNameRequest) (*SearchTrainByNameResponse, error)
	ViewRoute(context.Context, *ViewRoutesRequest) (*ViewRoutesResponse, error)
	mustEmbedUnimplementedTrainManagementServer()
}

// UnimplementedTrainManagementServer must be embedded to have forward compatible implementations.
type UnimplementedTrainManagementServer struct {
}

func (UnimplementedTrainManagementServer) AddTrain(context.Context, *AddTrainRequest) (*AddTrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrain not implemented")
}
func (UnimplementedTrainManagementServer) AddStation(context.Context, *AddStationRequest) (*AddStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStation not implemented")
}
func (UnimplementedTrainManagementServer) AddRoute(context.Context, *AddRouteRequest) (*AddRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedTrainManagementServer) UpdateTrainRoute(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrainRoute not implemented")
}
func (UnimplementedTrainManagementServer) SearchTrain(context.Context, *SearchTrainRequest) (*SearchTrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTrain not implemented")
}
func (UnimplementedTrainManagementServer) ViewTrain(context.Context, *ViewTrainRequest) (*ViewTrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewTrain not implemented")
}
func (UnimplementedTrainManagementServer) AddSeat(context.Context, *AddSeatRequest) (*AddSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeat not implemented")
}
func (UnimplementedTrainManagementServer) UpdateSeatIntoTrain(context.Context, *UpdateSeatIntoTrainRequest) (*UpdateSeatIntoTrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeatIntoTrain not implemented")
}
func (UnimplementedTrainManagementServer) ViewStation(context.Context, *ViewRequest) (*ViewStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewStation not implemented")
}
func (UnimplementedTrainManagementServer) SearchTrainByName(context.Context, *SearchTrainByNameRequest) (*SearchTrainByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTrainByName not implemented")
}
func (UnimplementedTrainManagementServer) ViewRoute(context.Context, *ViewRoutesRequest) (*ViewRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewRoute not implemented")
}
func (UnimplementedTrainManagementServer) mustEmbedUnimplementedTrainManagementServer() {}

// UnsafeTrainManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainManagementServer will
// result in compilation errors.
type UnsafeTrainManagementServer interface {
	mustEmbedUnimplementedTrainManagementServer()
}

func RegisterTrainManagementServer(s grpc.ServiceRegistrar, srv TrainManagementServer) {
	s.RegisterService(&TrainManagement_ServiceDesc, srv)
}

func _TrainManagement_AddTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainManagementServer).AddTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Train.TrainManagement/AddTrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainManagementServer).AddTrain(ctx, req.(*AddTrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainManagement_AddStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainManagementServer).AddStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Train.TrainManagement/AddStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainManagementServer).AddStation(ctx, req.(*AddStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainManagement_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainManagementServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Train.TrainManagement/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainManagementServer).AddRoute(ctx, req.(*AddRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainManagement_UpdateTrainRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainManagementServer).UpdateTrainRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Train.TrainManagement/UpdateTrainRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainManagementServer).UpdateTrainRoute(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainManagement_SearchTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainManagementServer).SearchTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Train.TrainManagement/SearchTrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainManagementServer).SearchTrain(ctx, req.(*SearchTrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainManagement_ViewTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewTrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainManagementServer).ViewTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Train.TrainManagement/ViewTrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainManagementServer).ViewTrain(ctx, req.(*ViewTrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainManagement_AddSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainManagementServer).AddSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Train.TrainManagement/AddSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainManagementServer).AddSeat(ctx, req.(*AddSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainManagement_UpdateSeatIntoTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatIntoTrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainManagementServer).UpdateSeatIntoTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Train.TrainManagement/UpdateSeatIntoTrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainManagementServer).UpdateSeatIntoTrain(ctx, req.(*UpdateSeatIntoTrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainManagement_ViewStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainManagementServer).ViewStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Train.TrainManagement/ViewStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainManagementServer).ViewStation(ctx, req.(*ViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainManagement_SearchTrainByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTrainByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainManagementServer).SearchTrainByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Train.TrainManagement/SearchTrainByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainManagementServer).SearchTrainByName(ctx, req.(*SearchTrainByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainManagement_ViewRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainManagementServer).ViewRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Train.TrainManagement/ViewRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainManagementServer).ViewRoute(ctx, req.(*ViewRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainManagement_ServiceDesc is the grpc.ServiceDesc for TrainManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Train.TrainManagement",
	HandlerType: (*TrainManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTrain",
			Handler:    _TrainManagement_AddTrain_Handler,
		},
		{
			MethodName: "AddStation",
			Handler:    _TrainManagement_AddStation_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _TrainManagement_AddRoute_Handler,
		},
		{
			MethodName: "UpdateTrainRoute",
			Handler:    _TrainManagement_UpdateTrainRoute_Handler,
		},
		{
			MethodName: "SearchTrain",
			Handler:    _TrainManagement_SearchTrain_Handler,
		},
		{
			MethodName: "ViewTrain",
			Handler:    _TrainManagement_ViewTrain_Handler,
		},
		{
			MethodName: "AddSeat",
			Handler:    _TrainManagement_AddSeat_Handler,
		},
		{
			MethodName: "UpdateSeatIntoTrain",
			Handler:    _TrainManagement_UpdateSeatIntoTrain_Handler,
		},
		{
			MethodName: "ViewStation",
			Handler:    _TrainManagement_ViewStation_Handler,
		},
		{
			MethodName: "SearchTrainByName",
			Handler:    _TrainManagement_SearchTrainByName_Handler,
		},
		{
			MethodName: "ViewRoute",
			Handler:    _TrainManagement_ViewRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/train.proto",
}
